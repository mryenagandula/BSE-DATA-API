from corporate_announcements import loadBSEAnnouncements
import datetime
import os
import threading
import logging
from constants import *
import time;
import read_user_inputs as readUserInputs
import utils as utils


def logConfig(logFileName):
    datefolder = datetime.datetime.now().strftime('%d%m%Y');
    folderPath = 'logs//'+datefolder;
    if os.path.exists(folderPath):
        print("folder already exits");
    else:
        path = os.path.join("logs", datefolder);
        os.makedirs(path)
    
    # NORMAL MODE
    logging.basicConfig(
        filename= os.path.join(folderPath, logFileName),
        format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        level=logging.INFO
    )

    # DEBUG MODE
    logging.basicConfig(
        filename= os.path.join(folderPath, logFileName),
        format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        level=logging.DEBUG
    )

def synchronized(wrapped):
    lock = threading.Lock()

    def _wrap(*args, **kwargs):
        with lock:
            return wrapped(*args, **kwargs)

    return _wrap

@synchronized
def main():
    start_time = time.time()
    fileName = '';
    input = readUserInputs.getInputs();
    announcementsFilePath = input['announcementsFilePath'];
    selectInputOption:str = input['selectInputOption'];
    if selectInputOption == ALL_ANNOUNCEMENTS:
        strTotal = selectInputOption;
        logFileName = utils.getAutoGeneratedLogFileName(strTotal);
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Option :: {selectInputOption}")
        fileName = utils.getAutoGeneratedFileName(strTotal,announcementsFilePath);
        loadBSEAnnouncements(fileName + ".csv");
        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes")

main();